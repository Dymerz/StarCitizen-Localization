name: INI Utils - Build and Publish

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'tools/ini-utils/**'
  push:
    branches: [main]
    paths:
      - 'tools/ini-utils/**'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version_update.outputs.new_version }}

    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: tools/ini-utils/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('tools/ini-utils/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      working-directory: tools/ini-utils
      run: npm ci

    - name: Build ini-utils
      working-directory: tools/ini-utils
      run: npm run build

    - name: Run tests
      working-directory: tools/ini-utils
      run: npm run test

    # Only update version on main branch
    - name: Update version
      id: version_update
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      working-directory: tools/ini-utils
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        NEW_VERSION=$(npm version patch --no-git-tag-version)
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    # Non-main branches or PRs just get the current version
    - name: Get current version
      id: current_version
      if: github.event_name != 'push' || github.ref != 'refs/heads/main'
      working-directory: tools/ini-utils
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Upload package.json
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: package-json
        path: tools/ini-utils/package*.json
        retention-days: 1

    - name: Create package tarball
      working-directory: tools/ini-utils
      run: npm pack

    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: ini-utils-package
        path: tools/ini-utils/*.tgz
        retention-days: 7

  publish:
    name: Publish to npmjs
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4

    - name: Download updated package.json
      uses: actions/download-artifact@v4
      with:
        name: package-json
        path: tools/ini-utils/

    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: ini-utils-package
        path: ./

    - name: Set up Node.js for npmjs
      uses: actions/setup-node@v4
      with:
        node-version: 22
        registry-url: 'https://registry.npmjs.org'

    - name: Check if version exists on npm
      id: version_check
      run: |
        PACKAGE_NAME="@dymerz/starcitizen-ini-utils"
        CURRENT_VERSION="${{ needs.build.outputs.new_version }}"

        echo "Checking if version $CURRENT_VERSION already exists on npm for package $PACKAGE_NAME"

        PUBLISHED_VERSION=$(npm show $PACKAGE_NAME version 2>/dev/null || echo "not_found")
        echo "Published version on npm: $PUBLISHED_VERSION"

        if [ "$PUBLISHED_VERSION" == "$CURRENT_VERSION" ]; then
          echo "Version $CURRENT_VERSION already exists on npm, skipping publish"
          echo "version_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Version $CURRENT_VERSION does not exist on npm, will publish"
          echo "version_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Skip message
      if: steps.version_check.outputs.version_exists == 'true'
      run: |
        echo "::notice ::Version ${{ needs.build.outputs.new_version }} already exists on npm, skipping publish and PR creation"

    - name: Publish to npmjs
      if: steps.version_check.outputs.version_exists != 'true'
      run: |
        echo "Publishing version ${{ needs.build.outputs.new_version }} to npmjs"
        npm publish --provenance --access public *.tgz
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create Pull Request for version bump
      if: steps.version_check.outputs.version_exists != 'true'
      uses: peter-evans/create-pull-request@v7
      with:
        commit-message: "chore: bump ini-utils version to ${{ needs.build.outputs.new_version }}"
        branch: automated-version-bump-ini-utils
        delete-branch: true
        draft: always-true
        assignees: Dymerz
        base: main
        title: "chore: bump ini-utils version to ${{ needs.build.outputs.new_version }}"
        body: |
          This PR is automatically generated to update the version of ini-utils package after a successful publish to npmjs registry.

          Version: ${{ needs.build.outputs.new_version }}

          This PR was created automatically by the GitHub Actions workflow.
        labels: ini-utils
        add-paths: |
          tools/ini-utils/package.json
          tools/ini-utils/package-lock.json
